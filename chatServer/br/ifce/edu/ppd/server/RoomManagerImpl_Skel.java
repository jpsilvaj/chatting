// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package br.ifce.edu.ppd.server;

public final class RoomManagerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean addClientToRoom(java.lang.String, br.ifce.edu.ppd.commons.Client)"),
	new java.rmi.server.Operation("boolean createRoom(java.lang.String, br.ifce.edu.ppd.commons.Client)"),
	new java.rmi.server.Operation("boolean deleteRoom(java.lang.String, br.ifce.edu.ppd.commons.Client)"),
	new java.rmi.server.Operation("java.util.Set getClientsConnectedByRoomName(java.lang.String)"),
	new java.rmi.server.Operation("br.ifce.edu.ppd.commons.IRoom getRoomByClient(br.ifce.edu.ppd.commons.Client)"),
	new java.rmi.server.Operation("java.util.List getRoomList()"),
	new java.rmi.server.Operation("boolean removeClientFromRoom(java.lang.String, br.ifce.edu.ppd.commons.Client)"),
	new java.rmi.server.Operation("boolean sendMessageToRoom(java.lang.String, java.lang.String, br.ifce.edu.ppd.commons.Client)")
    };
    
    private static final long interfaceHash = 8587063033422795022L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 7774541161767795715L) {
		opnum = 0;
	    } else if (hash == -6470332922935429191L) {
		opnum = 1;
	    } else if (hash == 7993343870929121903L) {
		opnum = 2;
	    } else if (hash == 5811824462123508864L) {
		opnum = 3;
	    } else if (hash == 3636223368851864333L) {
		opnum = 4;
	    } else if (hash == 7776347206400738461L) {
		opnum = 5;
	    } else if (hash == 123582668454815300L) {
		opnum = 6;
	    } else if (hash == 9063318395057068277L) {
		opnum = 7;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	br.ifce.edu.ppd.server.RoomManagerImpl server = (br.ifce.edu.ppd.server.RoomManagerImpl) obj;
	switch (opnum) {
	case 0: // addClientToRoom(String, Client)
	{
	    java.lang.String $param_String_1;
	    br.ifce.edu.ppd.commons.Client $param_Client_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Client_2 = (br.ifce.edu.ppd.commons.Client) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.addClientToRoom($param_String_1, $param_Client_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // createRoom(String, Client)
	{
	    java.lang.String $param_String_1;
	    br.ifce.edu.ppd.commons.Client $param_Client_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Client_2 = (br.ifce.edu.ppd.commons.Client) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.createRoom($param_String_1, $param_Client_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // deleteRoom(String, Client)
	{
	    java.lang.String $param_String_1;
	    br.ifce.edu.ppd.commons.Client $param_Client_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Client_2 = (br.ifce.edu.ppd.commons.Client) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.deleteRoom($param_String_1, $param_Client_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getClientsConnectedByRoomName(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.Set $result = server.getClientsConnectedByRoomName($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getRoomByClient(Client)
	{
	    br.ifce.edu.ppd.commons.Client $param_Client_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Client_1 = (br.ifce.edu.ppd.commons.Client) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    br.ifce.edu.ppd.commons.IRoom $result = server.getRoomByClient($param_Client_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getRoomList()
	{
	    call.releaseInputStream();
	    java.util.List $result = server.getRoomList();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // removeClientFromRoom(String, Client)
	{
	    java.lang.String $param_String_1;
	    br.ifce.edu.ppd.commons.Client $param_Client_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Client_2 = (br.ifce.edu.ppd.commons.Client) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.removeClientFromRoom($param_String_1, $param_Client_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // sendMessageToRoom(String, String, Client)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    br.ifce.edu.ppd.commons.Client $param_Client_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_Client_3 = (br.ifce.edu.ppd.commons.Client) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.sendMessageToRoom($param_String_1, $param_String_2, $param_Client_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
